CREATE OR REPLACE FILE FORMAT JSON_TYPE 
Type ='JSON';


CREATE OR REPLACE TABLE JSON_DATA
( JSON VARIANT);

select * from JSON_DATA;

SELECT 
value:userId::String  AS User_id,
value:firstName::String  as fname,
value:lastName::String as lname,
value:phoneNumber::number,
value:emailAddress::string 
FROM 
JSON_DATA , lateral flatten(input=>JSON:users);



-----XML 

CREATE OR REPLACE FILE FORMAT XML_TYPE
TYPE='XML';

CREATE OR REPLACE TABLE XML_TABLE
(XMLCOLUMN VARIANT);  --16 MB

select * from XML_TABLE;



Select XMLCOLUMN:"$" FROM XML_TABLE;

SELECT XMLCOLUMN:"@" FROM XML_TABLE;


SELECT XMLGET(XMLCOLUMN,'AuctionAnnouncement',0) FROM XML_TABLE;



SELECT XMLGET(value, 'SecurityType' ):"$" as "Security Type",
XMLGET( value, 'MaturityDate' ):"$" as "Maturity Date",
XMLGET( value, 'OfferingAmount' ):"$" as "Offeramount",
XMLGET( value, 'MatureSecurityAmount' ):"$" as "Mature Security Amount",
XMLGET(value,'AllTenderAccepted'):"$"::String as Tender
FROM XML_TABLE,
LATERAL FLATTEN(to_array(XML_TABLE.XMLCOLUMN:"$" )) auction_announcement;



----------- Nested XML

create or replace table DEPT_EMP_ADDR (
     xmldata variant not null
);


SELECT * FROM DEPT_EMP_ADDR;


-- root tag, index 
---$ retunr the element's value 
SELECT
     GET( XMLGET( xmldata, 'dept_id'), '$')::INTEGER as deptID,
     XMLGET( xmldata, 'dept_id' ):"$"::INTEGER AS DEPT_ID,
     XMLGET( xmldata, 'dept_name' ):"$"::STRING AS DEPT_NAME
  FROM DEPT_EMP_ADDR;

  ---@ returm the element name
SELECT
     GET(xmldata, '@dept_id')::integer as dept_id,
     GET(xmldata, '@dept_name')::string as dept_name
FROM DEPT_EMP_ADDR;



select
       XMLGET( xmldata, 'dept_id' ):"$"::string AS dept_id
     , XMLGET( xmldata, 'dept_name' ):"$"::string AS dept_name
     , XMLGET( emp.value, 'emp_id' ):"$"::integer as emp_id
     , XMLGET( emp.value, 'emp_fname' ):"$"::string as emp_fname
     , XMLGET( emp.value, 'emp_lname' ):"$"::string as emp_lname
     , XMLGET( emp.value, 'emp_title' ):"$"::string as emp_title
     , XMLGET( emp.value, 'emp_ssn' ):"$"::string as emp_ssn
from
    dept_emp_addr
    ,  lateral FLATTEN(dept_emp_addr.xmldata:"$") emp
  where GET( emp.value, '@') = 'employee'
  order by dept_id, emp_id;




  ---- going one level down

  select
     XMLGET( xmldata, 'dept_id' ):"$"::INTEGER AS ID
   , XMLGET( xmldata, 'dept_name' ):"$"::STRING AS NAME
   , XMLGET( emp.value, 'emp_id' ):"$"::INTEGER as emp_id
   , XMLGET( emp.value, 'emp_fname' ):"$"::STRING || ' ' ||
     XMLGET( emp.value, 'emp_lname' ):"$"::STRING as emp_name
   , XMLGET( addr.value, 'street_1' ):"$"::STRING as street_1
   , XMLGET( addr.value, 'city' ):"$"::STRING as city
   , XMLGET( addr.value, 'state' ):"$"::STRING as state
   , XMLGET( addr.value, 'zipcode' ):"$"::STRING as zipcode
   , XMLGET( addr.value, 'start_date' ):"$"::STRING as start_date
   , XMLGET( addr.value, 'end_date' ):"$"::STRING as end_date
from
  dept_emp_addr
  ,  lateral FLATTEN( xmldata:"$" ) emp
  ,  lateral FLATTEN( emp.value:"$" ) addr
  
where emp.value like '<employee>%'
  and addr.value like '<address>%'
order by ID, emp_id, start_date desc;
